{
  "MathLib.BaseExtensions.html": {
    "href": "MathLib.BaseExtensions.html",
    "title": "Class BaseExtensions | MathLib Docs",
    "keywords": "Class BaseExtensions Contains extensions for base in number representations. Inheritance object BaseExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MathLib Assembly: MathLib.dll Syntax public static class BaseExtensions Methods | Edit this page View Source IsPurelyPeriodic(int, Q) Checks if the given rational number is purely periodic in the current base. Declaration public static bool IsPurelyPeriodic(this int base_, Q q) Parameters Type Name Description int base_ The base. Q q The rational number to check. Returns Type Description bool true iff the rational number is purely periodic. | Edit this page View Source Pow(int, int) Raises the base to the specified exponent. Declaration public static Q Pow(this int base_, int exponent) Parameters Type Name Description int base_ The base. int exponent The exponent. Returns Type Description Q The result of raising the base to the exponent."
  },
  "MathLib.BaseInt.html": {
    "href": "MathLib.BaseInt.html",
    "title": "Class BaseInt | MathLib Docs",
    "keywords": "Class BaseInt Represents an immutable base-specific integer of a fixed length, that supports zero-padding. Inheritance object BaseInt Implements IEquatable<BaseInt> IComparable<BaseInt> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: MathLib Assembly: MathLib.dll Syntax public class BaseInt : IEquatable<BaseInt>, IComparable<BaseInt> Remarks A BaseInt is fully defined by its integer value, base and length. Shifting and other operations are applied with respect to the specified base, and the length is preserved. Constructors | Edit this page View Source BaseInt(int, BigInteger, int) Initializes a new instance of the BaseInt struct. Declaration public BaseInt(int base_, BigInteger intValue, int length = -1) Parameters Type Name Description int base_ The base of the BaseInt. BigInteger intValue The integer value. int length An optional length of the BaseInt. Default is the minimum required length of intValue in the given base. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the integer value is negative or the base is less than 2. ArgumentOutOfRangeException Thrown when an explicit length is specified that is less than minimum required length of intValue (in the given base). Properties | Edit this page View Source Base Gets the base of the BaseInt. Declaration public int Base { get; } Property Value Type Description int | Edit this page View Source First Gets the first (most significant) coefficient. Declaration public int First { get; } Property Value Type Description int | Edit this page View Source IntValue Integer value of the BaseInt in descending order. Declaration public BigInteger IntValue { get; } Property Value Type Description BigInteger Remarks This value is always stored descending order, regardless of the base's natural order. This makes it compliant with arithmetic operations of the BigInteger type. For ascending order, the value is reversed when the BaseInt is created. | Edit this page View Source IsZero Indicates whether the BaseInt is zero. Declaration public bool IsZero { get; } Property Value Type Description bool | Edit this page View Source Last Gets the last (least significant) coefficient. Declaration public int Last { get; } Property Value Type Description int | Edit this page View Source Length Gets the length of the BaseInt. Declaration public int Length { get; } Property Value Type Description int Methods | Edit this page View Source Append(BaseInt) Declaration public BaseInt Append(BaseInt right) Parameters Type Name Description BaseInt right Returns Type Description BaseInt | Edit this page View Source AssertSameBaseAs(BaseInt) Asserts that the current BaseInt has the same base as the specified BaseInt. Declaration public BaseInt AssertSameBaseAs(BaseInt other) Parameters Type Name Description BaseInt other The BaseInt to compare the base with. Returns Type Description BaseInt The current BaseInt if the bases are equal. Exceptions Type Condition ArgumentException Thrown when the bases are not equal. | Edit this page View Source Coefficients() Returns the coefficients in current base in descending order of significance. Declaration public IEnumerable<int> Coefficients() Returns Type Description IEnumerable<int> An enumerable sequence of coefficients from most to least significant. | Edit this page View Source CompareTo(BaseInt?) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(BaseInt? other) Parameters Type Name Description BaseInt other An object to compare with this instance. Returns Type Description int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. | Edit this page View Source Concatenation(BaseInt, BaseInt) Declaration public static BaseInt Concatenation(BaseInt left, BaseInt right) Parameters Type Name Description BaseInt left BaseInt right Returns Type Description BaseInt | Edit this page View Source Equals(BaseInt?) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(BaseInt? other) Parameters Type Name Description BaseInt other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source Equals(object?) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Serves as the default hash function. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current object. Overrides object.GetHashCode() | Edit this page View Source PadLeftExtra(int) Declaration public BaseInt PadLeftExtra(int zeros) Parameters Type Name Description int zeros Returns Type Description BaseInt | Edit this page View Source PadRightExtra(int) Declaration public BaseInt PadRightExtra(int zeros) Parameters Type Name Description int zeros Returns Type Description BaseInt | Edit this page View Source Reverse() Returns a new BaseInt where the coefficients are reversed. Declaration public BaseInt Reverse() Returns Type Description BaseInt A new BaseInt with reversed coefficients. Remarks The coefficients are reversed such that the most significant becomes the least significant, and vice versa. As a result, the outputs of Coefficients() is reversed, compared to the original instance. | Edit this page View Source ReverseInt(int, BigInteger, int) Declaration public static BigInteger ReverseInt(int base_, BigInteger integer, int length) Parameters Type Name Description int base_ BigInteger integer int length Returns Type Description BigInteger | Edit this page View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description string A string that represents the current object. Overrides object.ToString() | Edit this page View Source ToStringCoefficient() Declaration public string ToStringCoefficient() Returns Type Description string | Edit this page View Source Zero(int, int) Declaration public static BaseInt Zero(int base_, int zeroCount = 0) Parameters Type Name Description int base_ int zeroCount Returns Type Description BaseInt Operators | Edit this page View Source operator +(BaseInt, BaseInt) Declaration public static BaseInt operator +(BaseInt left, BaseInt right) Parameters Type Name Description BaseInt left BaseInt right Returns Type Description BaseInt | Edit this page View Source operator ==(BaseInt, BaseInt) Indicates whether two BaseInt objects are equal. Declaration public static bool operator ==(BaseInt left, BaseInt right) Parameters Type Name Description BaseInt left The first BaseInt to compare. BaseInt right The second BaseInt to compare. Returns Type Description bool true iff the two BaseInt objects are equal. | Edit this page View Source operator >(BaseInt, BaseInt) Indicates whether the first BaseInt object is greater than the second BaseInt object. Declaration public static bool operator >(BaseInt left, BaseInt right) Parameters Type Name Description BaseInt left The first BaseInt to compare. BaseInt right The second BaseInt to compare. Returns Type Description bool true iff the first BaseInt object is greater than the second BaseInt object. | Edit this page View Source operator >=(BaseInt, BaseInt) Indicates whether the first BaseInt object is greater than or equal to the second BaseInt object. Declaration public static bool operator >=(BaseInt left, BaseInt right) Parameters Type Name Description BaseInt left The first BaseInt to compare. BaseInt right The second BaseInt to compare. Returns Type Description bool true iff the first BaseInt object is greater than or equal to the second BaseInt object. | Edit this page View Source operator !=(BaseInt, BaseInt) Indicates whether two BaseInt objects are not equal. Declaration public static bool operator !=(BaseInt left, BaseInt right) Parameters Type Name Description BaseInt left The first BaseInt to compare. BaseInt right The second BaseInt to compare. Returns Type Description bool true iff the two BaseInt objects are not equal. | Edit this page View Source operator <<(BaseInt, int) Shifts the BaseInt left by the specified number of positions. Declaration public static BaseInt operator <<(BaseInt baseInt, int shift) Parameters Type Name Description BaseInt baseInt The BaseInt to shift. int shift The number of positions to shift. Returns Type Description BaseInt A new BaseInt shifted left by shift positions. Remarks The length of the BaseInt is preserved. Positions vacated on the right are zero-padded. Coefficients truncated on the left are discarded. | Edit this page View Source operator <(BaseInt, BaseInt) Indicates whether the first BaseInt object is less than the second BaseInt object. Declaration public static bool operator <(BaseInt left, BaseInt right) Parameters Type Name Description BaseInt left The first BaseInt to compare. BaseInt right The second BaseInt to compare. Returns Type Description bool true iff the first BaseInt object is less than the second BaseInt object. | Edit this page View Source operator <=(BaseInt, BaseInt) Indicates whether the first BaseInt object is less than or equal to the second BaseInt object. Declaration public static bool operator <=(BaseInt left, BaseInt right) Parameters Type Name Description BaseInt left The first BaseInt to compare. BaseInt right The second BaseInt to compare. Returns Type Description bool true iff the first BaseInt object is less than or equal to the second BaseInt object. | Edit this page View Source operator >>(BaseInt, int) Shifts the BaseInt right by the specified number of positions. Declaration public static BaseInt operator >>(BaseInt baseInt, int shift) Parameters Type Name Description BaseInt baseInt The BaseInt to shift. int shift The number of positions to shift. Returns Type Description BaseInt A new BaseInt shifted right by shift positions. Remarks The length of the BaseInt is preserved. Positions vacated on the left are zero-padded. Coefficients truncated on the right are discarded. | Edit this page View Source operator -(BaseInt, BaseInt) Declaration public static BaseInt operator -(BaseInt minuend, BaseInt subtrahend) Parameters Type Name Description BaseInt minuend BaseInt subtrahend Returns Type Description BaseInt Implements IEquatable<T> IComparable<T>"
  },
  "MathLib.BigIntegerExtensions.html": {
    "href": "MathLib.BigIntegerExtensions.html",
    "title": "Class BigIntegerExtensions | MathLib Docs",
    "keywords": "Class BigIntegerExtensions Provides a set of extension methods for the BigInteger struct, enabling additional functionality such as determining whether a number is odd, computing its absolute value, and calculating its bit length. It also provides the Extended Euclidean algorithm for computing GCD and Bézout coefficients. Inheritance object BigIntegerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MathLib Assembly: MathLib.dll Syntax public static class BigIntegerExtensions Methods | Edit this page View Source Abs(BigInteger) Absolute value of the specified integer value. Declaration public static BigInteger Abs(this BigInteger integer) Parameters Type Name Description BigInteger integer The BigInteger value whose absolute value is to be computed. Returns Type Description BigInteger A BigInteger representing the absolute value of the input. | Edit this page View Source Coprime(BigInteger, BigInteger) Indicates whether two specified BigInteger values are coprime. Declaration public static bool Coprime(this BigInteger a, BigInteger b) Parameters Type Name Description BigInteger a The first BigInteger value. BigInteger b The second BigInteger value. Returns Type Description bool true iff a and b are coprime. | Edit this page View Source ExtendedEuclideanAlgorithm(BigInteger, BigInteger) Implements the extended Euclidean algorithm to compute the greatest common divisor (GCD) of two BigInteger values and the corresponding Bézout coefficients. Declaration public static (BigInteger gcd, BigInteger x, BigInteger y) ExtendedEuclideanAlgorithm(BigInteger a, BigInteger b) Parameters Type Name Description BigInteger a The first BigInteger. BigInteger b The second BigInteger. Returns Type Description (BigInteger gcd, BigInteger x, BigInteger y) A tuple containing three BigInteger values: The greatest common divisor (gcd) of a and b. The Bézout coefficient 'x' (corresponding to a in Bézout's identity). The Bézout coefficient 'y' (corresponding to b in Bézout's identity). Remarks For two integers a and b, this method computes the GCD, denoted as gcd(a, b), and finds integers 'x' and 'y' such that Bézout's identity is satisfied: a·x + b· y = gcd(a, b) | Edit this page View Source IsDivisibleBy(BigInteger, BigInteger) Indicates whether the specified BigInteger value is divisible by the specified divisor. Declaration public static bool IsDivisibleBy(this BigInteger integer, BigInteger divisor) Parameters Type Name Description BigInteger integer The BigInteger value to check. BigInteger divisor The divisor to check against. Returns Type Description bool true iff the value is divisible by the divisor. | Edit this page View Source IsOdd(BigInteger) Indicates whether the specified BigInteger value is odd. Declaration public static bool IsOdd(this BigInteger integer) Parameters Type Name Description BigInteger integer The BigInteger value to check. Returns Type Description bool true iff integer is odd. | Edit this page View Source IsPowerOf(BigInteger, int) Indicates whether the specified BigInteger value is a power of the specified exponent. Declaration public static bool IsPowerOf(this BigInteger integer, int exponent) Parameters Type Name Description BigInteger integer The BigInteger value to check. int exponent The exponent to check against. Returns Type Description bool true iff the value is a power of the exponent. | Edit this page View Source LCM(BigInteger, BigInteger) Returns the Least Common Multiple of two integers Declaration public static BigInteger LCM(this BigInteger first, BigInteger second) Parameters Type Name Description BigInteger first The first integer BigInteger second The second integer Returns Type Description BigInteger LCM of first and second Examples LCM(4, 6) = 12, since 12 is both a multiple of 4 (43) and a multiple of 6 (62) Exceptions Type Condition ArgumentOutOfRangeException Thrown if first or second is zero. | Edit this page View Source Length(BigInteger, int) Returns the number of coefficients (or digits) required to represent this BigInteger in a specified base. Declaration public static int Length(this BigInteger integer, int base_) Parameters Type Name Description BigInteger integer The BigInteger to calculate the coefficient count for. int base_ The base in which this BigInteger will be represented. Must be greater than 1 for meaningful results. Returns Type Description int The number of coefficients required to represent this BigInteger in base base_. 0 if base_ is less than 2. Remarks If this BigInteger is 0, the result is always 0, regardless of the base. If this BigInteger is negative, the result will be the same as for its absolute value. If the base base_ is less than 2, this method returns 0, following the behavior of Log(BigInteger, double). | Edit this page View Source Mod(BigInteger, BigInteger) Computes the modulus of a BigInteger in the same way as in languages like Python, Haskell, Julia and Matlab. The result follows the mathematical definition of modulus where the remainder always has the same sign as the divisor, ensuring predictable results for both positive and negative values. Declaration public static BigInteger Mod(this BigInteger integer, BigInteger modulus) Parameters Type Name Description BigInteger integer The BigInteger value to compute the modulus for. BigInteger modulus The modulus value. Must be non-zero. Returns Type Description BigInteger The remainder when integer is divided by modulus, adjusted to follow the same sign as modulus. Remarks The result of the modulus operation is adjusted based on the sign of modulus: When modulus is positive, the result is in the range [0, modulus) When modulus is negative, the result is in the range (modulus, 0]. This method provides consistent behavior for modulus operations, similar to how it is implemented in Python, Haskell, Julia, and Matlab. Examples Examples: BigInteger result1 = new BigInteger(10).Mod(3); // 1 BigInteger result2 = new BigInteger(-10).Mod(3); // 2 BigInteger result3 = new BigInteger(10).Mod(-3); // -2 BigInteger result4 = new BigInteger(-10).Mod(-3); // -1 Exceptions Type Condition DivideByZeroException Thrown when modulus is zero. | Edit this page View Source ModMinAbs(BigInteger, BigInteger) Modulo operation yielding the remainder (positive or negative) with the smallest absolute value, preserving congruence under the specified modulus. Declaration public static BigInteger ModMinAbs(this BigInteger integer, BigInteger modulus) Parameters Type Name Description BigInteger integer Dividend, an integer. BigInteger modulus Modulus, a positive integer. Returns Type Description BigInteger The integer r closest to zero for which there exists an integer k such that n = k × mod + r, and -mod/2 ≤ r ≤ mod/2. Remarks For both positive and negative integer, the result minimizes |r|, providing a \"balanced\" or symmetric result. This is useful in contexts where closeness to zero is desired, such as balanced systems or modular arithmetic with minimal magnitude deviation. For example: 4 Mod 7 yields -3 instead of 4, as -3 is closer to zero. 9 Mod 7 yields 2, as 2 is already closest to zero. | Edit this page View Source ModularInverse(BigInteger, BigInteger) Computes the modular inverse of a number integer under a given modulus modulus. Declaration public static BigInteger ModularInverse(this BigInteger integer, BigInteger modulus) Parameters Type Name Description BigInteger integer The number for which the modular inverse is to be computed. Must be greater than or equal to 1. BigInteger modulus The modulus under which the inverse is computed. Must be greater than or equal to 2. Returns Type Description BigInteger The modular inverse of integer modulo modulus. The result is normalized to be within the range [0, modulus). Remarks The modular inverse of integer modulo modulus is a number x such that: integer ⋅ x ≡ 1 (mod modulus) This method uses the Extended Euclidean Algorithm to compute the inverse. The result of this method is always in the range [0, modulus), as it is normalized by applying the modulus operation. Examples BigInteger result1 = new BigInteger(3).ModularInverse(7); // 5 BigInteger result2 = new BigInteger(2).ModularInverse(11); // 6 Exceptions Type Condition ArgumentOutOfRangeException Thrown if integer is less than 1 or if modulus is less than 2. ArgumentException Thrown if integer and modulus are not coprime, i.e., if the greatest common divisor of the two is not 1. | Edit this page View Source Parse(string, int) Parses the string representation of a number in the specified base to its BigInteger equivalent. Declaration public static BigInteger Parse(string input, int fromBase) Parameters Type Name Description string input The string representation of the number to parse. It may start with a '-' to indicate a negative number. int fromBase The base of the input number, ranging from 2 to 36. Returns Type Description BigInteger A BigInteger representation of the parsed value. Examples Console.WriteLine(Parse(\"-10.011\", 2)); //outputs \"-19/8\" Exceptions Type Condition ArgumentException Thrown if fromBase is not within 2 to 36."
  },
  "MathLib.Cp.html": {
    "href": "MathLib.Cp.html",
    "title": "Class Cp | MathLib Docs",
    "keywords": "Class Cp Represents the field of complex p-adic numbers, denoted ℂₚ in mathematics. Inheritance object Cp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MathLib Assembly: MathLib.dll Syntax public class Cp Remarks ℂₚ is the algebraic closure and completion of ℚₚ with respect to the p-adic norm. It contains all solutions to algebraic equations over ℚₚ, as well as transcendental numbers. Thus, ℂₚ generalizes ℚₚ by extending it to include both algebraic and transcendental elements. ℂₚ contains the following sets of numbers: ℚ: All rational numbers. ℚₚ: All ultimately periodic p-adic numbers. ℂ: All complex numbers, including imaginary numbers like √(-1). All algebraic numbers over ℚₚ. ℂₚ is closed under addition, subtraction, multiplication, division, exponentiation, logarithms, and square roots. It supports all operations on complex numbers within the p-adic framework. Examples The square root of -1 does not exist in ℚₚ but exists in ℂₚ, yielding the imaginary unit i. A 5-adic expansion for the rational number i (√-1) is: √(-1) = i = \"…04240422331102414131141421404340423140223032431212\"₅ (no repeating pattern) This is the OEIS sequence A210850, the other OEIS sequences for i is A210851"
  },
  "MathLib.EnumerableExtensions.html": {
    "href": "MathLib.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | MathLib Docs",
    "keywords": "Class EnumerableExtensions Provides extension methods for IEnumerable<T>. Inheritance object EnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MathLib Assembly: MathLib.dll Syntax public static class EnumerableExtensions Methods | Edit this page View Source Str<T>(IEnumerable<T>, string, int) Joins the elements of the enumerable into a string, separated by the specified delimiter. Each element is left-padded to meet a specified total width. Declaration public static string Str<T>(this IEnumerable<T> source, string delimiter = \"\", int totalWidth = 0) where T : notnull Parameters Type Name Description IEnumerable<T> source The enumerable to join. string delimiter The delimiter to insert between each element. Defaults to an empty string. int totalWidth The total width of each element in the joined string. Defaults to 0 (no padding). Returns Type Description string A string with the joined elements, padded to the specified total width. Type Parameters Name Description T The type of the elements in the enumerable. Must not be null. | Edit this page View Source Sum(IEnumerable<BigInteger>) Sum of all elements in the specified source. Declaration public static BigInteger Sum(this IEnumerable<BigInteger> source) Parameters Type Name Description IEnumerable<BigInteger> source Collection of BigInteger elements. Returns Type Description BigInteger Total sum as BigInteger."
  },
  "MathLib.IntExtensions.html": {
    "href": "MathLib.IntExtensions.html",
    "title": "Class IntExtensions | MathLib Docs",
    "keywords": "Class IntExtensions Inheritance object IntExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MathLib Assembly: MathLib.dll Syntax public static class IntExtensions Methods | Edit this page View Source Abs(int) Returns the absolute value of the specified integer. Declaration public static int Abs(this int integer) Parameters Type Name Description int integer The 32-bit signed integer to check. Returns Type Description int The absolute value of integer. | Edit this page View Source IsEven(int) Indicates whether the specified integer is even. Declaration public static bool IsEven(this int integer) Parameters Type Name Description int integer The 32-bit signed integer to check. Returns Type Description bool true iff integer is even; otherwise, false. | Edit this page View Source IsOdd(int) Indicates whether the specified integer is odd. Declaration public static bool IsOdd(this int integer) Parameters Type Name Description int integer The 32-bit signed integer to check. Returns Type Description bool true iff integer is odd; otherwise, false. | Edit this page View Source IsPowerOfTwo(int) Indicates whether the specified integer is a power of two. Declaration public static bool IsPowerOfTwo(this int integer) Parameters Type Name Description int integer The integer to test. Returns Type Description bool true iff integer is a power of two. Remarks If the integer is negative the result is | Edit this page View Source Mod(int, int) Computes the modulus of an int in the same way as in languages like Python, Haskell, Julia and Matlab. The result follows the mathematical definition of modulus where the remainder always has the same sign as the divisor, ensuring predictable results for both positive and negative values. Declaration public static int Mod(this int integer, int modulus) Parameters Type Name Description int integer The int value to compute the modulus for. int modulus The modulus value. Must be non-zero. Returns Type Description int The remainder when integer is divided by modulus, adjusted to follow the same sign as modulus. Remarks The result of the modulus operation is adjusted based on the sign of modulus: When modulus is positive, the result is in the range [0, modulus) When modulus is negative, the result is in the range (modulus, 0]. This method provides consistent behavior for modulus operations, similar to how it is implemented in Python, Haskell, Julia, and Matlab. Examples Examples: int result1 = 10.Mod(3); // 1 int result2 = (-10).Mod(3); // 2 int result3 = 10.Mod(-3); // -2 int result4 = (-10).Mod(-3); // -1 Exceptions Type Condition DivideByZeroException Thrown when modulus is zero. | Edit this page View Source ModMinAbs(int, int) Modulo operation yielding the remainder (positive or negative) with the smallest absolute value, preserving congruence under the specified modulus. Declaration public static int ModMinAbs(this int integer, int modulus) Parameters Type Name Description int integer Dividend, an integer. int modulus Modulus, a positive integer. Returns Type Description int The integer r closest to zero for which there exists an integer k such that n = k × mod + r, and -mod/2 ≤ r ≤ mod/2. Remarks For both positive and negative integer, the result minimizes |r|, providing a \"balanced\" or symmetric result. This is useful in contexts where closeness to zero is desired, such as balanced systems or modular arithmetic with minimal magnitude deviation. For example: 4 Mod 7 yields -3 instead of 4, as -3 is closer to zero. 9 Mod 7 yields 2, as 2 is already closest to zero. | Edit this page View Source Sign(int) Returns a value indicating the sign of the specified integer. Declaration public static int Sign(this int integer) Parameters Type Name Description int integer The 32-bit signed integer to check. Returns Type Description int A number that indicates the sign of integer."
  },
  "MathLib.Lib.html": {
    "href": "MathLib.Lib.html",
    "title": "Class Lib | MathLib Docs",
    "keywords": "Class Lib Static class for general assembly methods Inheritance object Lib Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MathLib Assembly: MathLib.dll Syntax public static class Lib Properties | Edit this page View Source BuildVersion Retrieves assebly information. Declaration public static string BuildVersion { get; } Property Value Type Description string A string representing the version, target .NET framework, and build configuration (e.g. Debug, Release) of the assembly. The format of the returned string is \"Version: 'X.Y.Z.W' Build:'FrameworkName' Configuration:'BuildConfiguration'\". Examples Console.WriteLine(Lib.BuildVersion); // Example output: // \"Version: 1.0.0.0 Build:.NET Standard 2.1 Configuration:Release\""
  },
  "MathLib.Misc.BalBits.html": {
    "href": "MathLib.Misc.BalBits.html",
    "title": "Class BalBits | MathLib Docs",
    "keywords": "Class BalBits Inheritance object BalBits Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MathLib.Misc Assembly: MathLib.dll Syntax public static class BalBits Methods | Edit this page View Source BalancedBit(int, int, bool) Declaration public static int BalancedBit(int number, int index, bool isLastDigit) Parameters Type Name Description int number int index bool isLastDigit Returns Type Description int | Edit this page View Source BitString(IEnumerable<int>) Declaration public static string BitString(this IEnumerable<int> balBits) Parameters Type Name Description IEnumerable<int> balBits Returns Type Description string | Edit this page View Source BitString(IEnumerable<int>, int) Declaration public static string BitString(this IEnumerable<int> balBits, int bitWidth) Parameters Type Name Description IEnumerable<int> balBits int bitWidth Returns Type Description string | Edit this page View Source ToBalancedBits(int, int) Same as ToBalancedBits(BigInteger, int) but for Int32 type Declaration public static IEnumerable<int> ToBalancedBits(this int integer, int minLength = 0) Parameters Type Name Description int integer int minLength Returns Type Description IEnumerable<int> | Edit this page View Source ToBalancedBits(BigInteger, int) Converts a BigInteger to its balanced binary form, where each bit is either -1 or 1. Declaration public static IEnumerable<int> ToBalancedBits(this BigInteger integer, int minLength = 0) Parameters Type Name Description BigInteger integer The integer to convert. Must be odd. int minLength The minimum length of the resulting balanced bit sequence. Returns Type Description IEnumerable<int> An IEnumerable<T> of int values representing the balanced binary form of integer, where each bit is either -1 or 1. Remarks The balanced binary form provides a unique, minimal-magnitude representation for each odd integer, utilizing only the digits -1 and 1. This form is symmetric around zero, meaning that positive and negative values are represented with the same minimal magnitude in each position. Exceptions Type Condition ArgumentException Thrown if integer is even, as the balanced binary form is defined only for odd integers."
  },
  "MathLib.Misc.BalDigits.html": {
    "href": "MathLib.Misc.BalDigits.html",
    "title": "Class BalDigits | MathLib Docs",
    "keywords": "Class BalDigits Inheritance object BalDigits Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MathLib.Misc Assembly: MathLib.dll Syntax public static class BalDigits Methods | Edit this page View Source Count(int, int) Declaration public static int Count(int index, int length) Parameters Type Name Description int index int length Returns Type Description int | Edit this page View Source Count(int, int, int) Declaration public static int Count(int index, int xLength, int yLength) Parameters Type Name Description int index int xLength int yLength Returns Type Description int | Edit this page View Source Counts(int, int) Declaration public static IEnumerable<int> Counts(int xLength, int yLength) Parameters Type Name Description int xLength int yLength Returns Type Description IEnumerable<int> | Edit this page View Source DigitString(IEnumerable<int>, int) Declaration public static string DigitString(this IEnumerable<int> balDigits, int digitWidth) Parameters Type Name Description IEnumerable<int> balDigits int digitWidth Returns Type Description string | Edit this page View Source ToBalancedDigits(BigInteger, int, int) Declaration public static int[] ToBalancedDigits(BigInteger integer, int xLength, int yLength) Parameters Type Name Description BigInteger integer int xLength int yLength Returns Type Description int[] | Edit this page View Source ToBalancedDigits(BigInteger, int[]) Converts a specified integer into a sequence of constrained digits based on the constraints provided in constraints. Declaration public static int[] ToBalancedDigits(BigInteger integer, int[] constraints) Parameters Type Name Description BigInteger integer The target integer value to represent as a sequence of constrained digits. int[] constraints A list of non-negative integers, each defining constraints for the respective position in the sequence. Returns Type Description int[] An array of integers representing integer as a sequence of constrained digits. Remarks This method generates a sequence representing integer as a weighted sum in base-2, adhering to constraints in constraints. Each constraint specifies: The maximum absolute value of the corresponding digit. The parity requirement (odd/even) based on the parity of the constraint. The minimum length of constraints is 3, and the first and last elements are always 1, ensuring that the sequence starts and ends with either -1 or 1. The resulting sequence meets the following conditions: Its length matches the length of constraints. The weighted sum of the sequence, using powers of 2 (1, 2, 4, 8, ...), equals integer. Each digit in the sequence meets both the absolute value and parity requirements specified by the corresponding constraint. The first and last digits are constrained to either -1 or 1. Examples ToBalancedDigits(1, new int[] { 1, 1 }) => [-1, 1] //1 = 1 * 2^0 + 1 * 2^1) ToBalancedDigits(-1, new int[] { 1, 1 }) => [1, -1] //-1 = 1 * 2^0 + (-1) * 2^1) ToBalancedDigits(-25, new int[] { 1, 2, 3, 2, 1 }) => [-1, -2, -1, 0, -1] //-25 = -1 * 2^0 + (-2) * 2^1 + (-1) * 2^2 + 0 * 2^3 + (-1) * 2^4)"
  },
  "MathLib.Misc.Forms.html": {
    "href": "MathLib.Misc.Forms.html",
    "title": "Class Forms | MathLib Docs",
    "keywords": "Class Forms Provides methods for converting integers to various forms such as Non-Adjacent Form (NAF) and balanced binary form. Inheritance object Forms Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MathLib.Misc Assembly: MathLib.dll Syntax public static class Forms Methods | Edit this page View Source ToNonAdjacentForm(BigInteger) Converts a BigInteger to its Non-Adjacent Form (NAF), a sparse representation where no two adjacent digits are non-zero. Declaration public static IEnumerable<int> ToNonAdjacentForm(this BigInteger integer) Parameters Type Name Description BigInteger integer The integer to convert. Returns Type Description IEnumerable<int> An IEnumerable<T> of int values representing the Non-Adjacent Form of integer, with each element being 0, 1, or -1. Remarks The Non-Adjacent Form (NAF) minimizes the number of non-zero bits, which is useful in contexts like cryptographic algorithms for efficiency."
  },
  "MathLib.Misc.html": {
    "href": "MathLib.Misc.html",
    "title": "Namespace MathLib.Misc | MathLib Docs",
    "keywords": "Namespace MathLib.Misc Classes BalBits BalDigits Forms Provides methods for converting integers to various forms such as Non-Adjacent Form (NAF) and balanced binary form."
  },
  "MathLib.PAdics.ModP.html": {
    "href": "MathLib.PAdics.ModP.html",
    "title": "Class ModP | MathLib Docs",
    "keywords": "Class ModP Represents an element in the finite field GF(p), where p is a prime number. This class supports arithmetic operations modulo p, including addition, subtraction, multiplication, and division. These operations are performed in the context of a Galois field, ensuring that the results stay within the finite field. Inheritance object ModP Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: MathLib.PAdics Assembly: MathLib.dll Syntax public class ModP Constructors | Edit this page View Source ModP(BigInteger, BigInteger) Initializes a new instance of the ModP class, representing an element in the finite field GF(p). Declaration public ModP(BigInteger n, BigInteger p) Parameters Type Name Description BigInteger n The value of the element. BigInteger p The prime modulus p that defines the finite field GF(p). Exceptions Type Condition ArgumentException Thrown when p is not a prime number. Properties | Edit this page View Source N The value of the element in the finite field GF(p). Declaration public BigInteger N { get; } Property Value Type Description BigInteger | Edit this page View Source P The prime modulus p defining the finite field GF(p). Declaration public BigInteger P { get; } Property Value Type Description BigInteger Methods | Edit this page View Source Equals(object?) Indicates whether the specified element is equal to the current element. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj Another element to compare with. Returns Type Description bool true iff the elements are equal. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides object.GetHashCode() | Edit this page View Source Inverse() Computes the multiplicative inverse of this element in the finite field GF(p). Declaration public ModP Inverse() Returns Type Description ModP The multiplicative inverse of this element, which, when multiplied by the original element, results in 1 in the finite field GF(p). This operation is essential in division within the field. Remarks The multiplicative inverse of an element \"a\" in a finite field GF(p) is another element \"b\" such that the product of \"a\" and \"b\" is congruent to 1 modulo p. For example, in GF(5), the multiplicative inverse of 3 is 2 because (3 * 2) % 5 = 1. This method uses the Extended Euclidean Algorithm to find such an element. Examples var a = new ModP(3, 5); var inverse = a.Inverse(); // inverse is 2 in GF(5) because 3 * 2 % 5 = 1 Exceptions Type Condition DivideByZeroException Thrown when the element is zero because zero does not have a multiplicative inverse. | Edit this page View Source ToString() Returns a string that represents the current element. Declaration public override string ToString() Returns Type Description string A string that represents the current element in the format \"n % p\". Overrides object.ToString() Examples var a = new ModP(3, 5); Console.WriteLine(a); // Outputs \"3 % 5\" Operators | Edit this page View Source operator +(ModP, ModP) Adds two elements in the finite field GF(p). Declaration public static ModP operator +(ModP a, ModP b) Parameters Type Name Description ModP a An element in the finite field GF(p). ModP b Another element in the finite field GF(p). Returns Type Description ModP The sum of the two elements, also an element of GF(p). Examples var a = new ModP(3, 5); var b = new ModP(4, 5); var result = a + b; // result is 2 in GF(5) | Edit this page View Source operator /(ModP, ModP) Divides one element by another in the finite field GF(p). Declaration public static ModP operator /(ModP a, ModP b) Parameters Type Name Description ModP a Ab element in the finite field GF(p). ModP b Another element in the finite field GF(p). Returns Type Description ModP The quotient of the two elements, also an element of GF(p). Examples var a = new ModP(3, 5); var b = new ModP(4, 5); var result = a / b; // result is 2 in GF(5) Exceptions Type Condition DivideByZeroException Thrown when attempting to divide by zero. | Edit this page View Source operator *(ModP, ModP) Multiplies two elements in the finite field GF(p). Declaration public static ModP operator *(ModP a, ModP b) Parameters Type Name Description ModP a Ab element in the finite field GF(p). ModP b Another element in the finite field GF(p). Returns Type Description ModP The product of the two elements, also an element of GF(p). Examples var a = new ModP(3, 5); var b = new ModP(4, 5); var result = a * b; // result is 2 in GF(5) | Edit this page View Source operator -(ModP, ModP) Subtracts one element from another in the finite field GF(p). Declaration public static ModP operator -(ModP a, ModP b) Parameters Type Name Description ModP a An element in the finite field GF(p). ModP b Another element in the finite field GF(p). Returns Type Description ModP The difference of the two elements, also an element of GF(p). Examples var a = new ModP(3, 5); var b = new ModP(4, 5); var result = a - b; // result is 4 in GF(5)"
  },
  "MathLib.PAdics.html": {
    "href": "MathLib.PAdics.html",
    "title": "Namespace MathLib.PAdics | MathLib Docs",
    "keywords": "Namespace MathLib.PAdics Classes ModP Represents an element in the finite field GF(p), where p is a prime number. This class supports arithmetic operations modulo p, including addition, subtraction, multiplication, and division. These operations are performed in the context of a Galois field, ensuring that the results stay within the finite field."
  },
  "MathLib.Prime.Factorization.html": {
    "href": "MathLib.Prime.Factorization.html",
    "title": "Class Factorization | MathLib Docs",
    "keywords": "Class Factorization Represents the prime factorization of an integer, which may be partial. Handles composite remainder factors and negative integers. Inheritance object Factorization Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: MathLib.Prime Assembly: MathLib.dll Syntax public sealed class Factorization Remarks This class is immutable. The factorization is initialized via a primary constructor that accepts the prime factors and the remainder factor. Constructors | Edit this page View Source Factorization(int[], BigInteger) Initializes a new instance of the Factorization class. Declaration public Factorization(int[] primeFactors, BigInteger remainderFactor) Parameters Type Name Description int[] primeFactors An array of prime factors in ascending order. BigInteger remainderFactor The remainder after factoring, which may be composite or negative. If the input integer is negative, the remainder factor carries the negative sign. Fields | Edit this page View Source PrimeFactors The prime factors in ascending order. True primes (meaning all are positive). Declaration public readonly int[] PrimeFactors Field Value Type Description int[] | Edit this page View Source RemainderFactor The remainder after factoring, which may be composite if the factorization is partial. If the input was negative, the remainder is also negative. Declaration public readonly BigInteger RemainderFactor Field Value Type Description BigInteger Properties | Edit this page View Source FactorCount The total count of factors, including the remainder if it is not ±1. Declaration public int FactorCount { get; } Property Value Type Description int | Edit this page View Source FactoredInteger Recreates the original integer from the prime factors and remainder factor. Declaration public BigInteger FactoredInteger { get; } Property Value Type Description BigInteger | Edit this page View Source IsComplete Indicates if the factorization is complete (RemainderFactor is ±1). Declaration public bool IsComplete { get; } Property Value Type Description bool | Edit this page View Source IsOne Indicates if the factored number is one. Declaration public bool IsOne { get; } Property Value Type Description bool | Edit this page View Source IsZero Indicates if the factored number is zero. Declaration public bool IsZero { get; } Property Value Type Description bool Methods | Edit this page View Source Equals(Factorization?) Indicates if this factorization is equal to another. Declaration public bool Equals(Factorization? other) Parameters Type Name Description Factorization other The factorization to compare with. Returns Type Description bool true iff this instance is equal to the other. | Edit this page View Source Equals(object?) Indicates if this object is equal to another. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with. Returns Type Description bool true iff equal to obj. Overrides object.Equals(object) | Edit this page View Source GetHashCode() Computes the hash code for this factorization. Declaration public override int GetHashCode() Returns Type Description int The hash code. Overrides object.GetHashCode() | Edit this page View Source ToString() Returns a string representation of the factorization, including the prime factors and remainder. Declaration public override string ToString() Returns Type Description string A string representing the factorization. Overrides object.ToString()"
  },
  "MathLib.Prime.PrimeGenerator.html": {
    "href": "MathLib.Prime.PrimeGenerator.html",
    "title": "Class PrimeGenerator | MathLib Docs",
    "keywords": "Class PrimeGenerator Generation of primes using a segmented sieve algorithm. Inheritance object PrimeGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MathLib.Prime Assembly: MathLib.dll Syntax public static class PrimeGenerator Remarks The PrimeGenerator class uses a segmented sieve algorithm to efficiently generate prime numbers. The algorithm is designed to be cache-friendly by processing primes in segments or \"pages\", which helps in reducing memory usage and improving performance. This implementation is particularly useful for generating a large number of primes. Methods | Edit this page View Source GeneratePrimes() Generates an enumerable sequence of prime numbers. Declaration public static IEnumerable<int> GeneratePrimes() Returns Type Description IEnumerable<int> An IEnumerable<T> of prime numbers. Remarks This method uses a segmented sieve algorithm to generate prime numbers. The algorithm divides the range of numbers into smaller segments and processes each segment individually. This approach helps in keeping the memory footprint low and improves cache performance. The first prime number (2) is yielded separately, and subsequent primes are generated and yielded as the algorithm processes each segment."
  },
  "MathLib.Prime.Primes.html": {
    "href": "MathLib.Prime.Primes.html",
    "title": "Class Primes | MathLib Docs",
    "keywords": "Class Primes Provides operations related to primes, such as factorization Inheritance object Primes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: MathLib.Prime Assembly: MathLib.dll Syntax public sealed class Primes Remarks The method Factorization(BigInteger) uses a highly parallelized algorithm. Since it will utilize all available cores, it will (for reduced context-switching and maximum performance) enforce only serial execution between separate calls to the method. The class does not consume any memory before being activated. This happens if either one of the main operations are called, or via an explicit call to Prepare(Action?) Fields | Edit this page View Source MaxSupportedPrime The maximum prime supported in factorization. Declaration public const int MaxSupportedPrime = 2000000000 Field Value Type Description int Properties | Edit this page View Source IsReady Gets a value indicating whether the Primes instance is ready. All calls to this class will be queued until instance is ready Declaration public static bool IsReady { get; } Property Value Type Description bool Methods | Edit this page View Source Factorization(BigInteger) Performs the prime factorization of a given integer. Declaration public static Factorization Factorization(BigInteger integer) Parameters Type Name Description BigInteger integer The integer to be factorized. Returns Type Description Factorization A Factorization(BigInteger) object containing the prime factors and a remaining factor (that can be 1). See Also Factorization(BigInteger) | Edit this page View Source Prepare(Action?) Prepares the Primes instance for use in the background. Declaration public static void Prepare(Action? instanceReadyCallback = null) Parameters Type Name Description Action instanceReadyCallback An optional callback to be invoked when the instance is ready. Remarks This method returns instantly. If Prepare(Action?) is not called, everything will still work perfectly, but the first operation could take longer to complete."
  },
  "MathLib.Prime.html": {
    "href": "MathLib.Prime.html",
    "title": "Namespace MathLib.Prime | MathLib Docs",
    "keywords": "Namespace MathLib.Prime Classes Factorization Represents the prime factorization of an integer, which may be partial. Handles composite remainder factors and negative integers. PrimeGenerator Generation of primes using a segmented sieve algorithm. Primes Provides operations related to primes, such as factorization"
  },
  "MathLib.Q.html": {
    "href": "MathLib.Q.html",
    "title": "Class Q | MathLib Docs",
    "keywords": "Class Q Represents the set of rational numbers, denoted by ℚ in mathematics. Inheritance object Q Qb Qp Implements IEquatable<Q> IComparable<Q> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: MathLib Assembly: MathLib.dll Syntax public class Q : IEquatable<Q>, IComparable<Q> Remarks The set of rational numbers is defined as the set of all numbers that can be expressed as the quotient of two integers, where the denominator is non-zero. Formally: ℚ = {a / b | a ∈ ℤ, b ∈ ℤ, b ≠ 0} Rational numbers include integers, fractions, and terminating or repeating decimal expansions. Many operations, such as addition, subtraction, multiplication, and division (excluding division by zero) are closed within ℚ. Rational numbers can be embedded within the set of real numbers ℝ, and the set of p-adic numbers ℚₚ. They serve as the foundation for more complex number systems. In this library, the class Q represents the mathematical structure of rational numbers, and serves as a base for more advanced number fields like Qp and Cp. The class methods must never throw exceptions from arithmetic operations. Instead, they return NaN for undefined results (such as from divide by zero). Constructors | Edit this page View Source Q() Initializes a rational number for the default value zero. Declaration public Q() | Edit this page View Source Q(Q) Protected constructor that creates a copy of a Q object. Declaration protected Q(Q q) Parameters Type Name Description Q q | Edit this page View Source Q(BigInteger) Initializes a rational number with the specified integer value. Declaration public Q(BigInteger numerator) Parameters Type Name Description BigInteger numerator The integer value. | Edit this page View Source Q(BigInteger, BigInteger) Initializes a rational number with the specified numerator and denominator. The rational number is automatically normalized, meaning: Q will be simplified so the numerator and denominator is coprime. The sign of the number will always be carried by the numerator (denominator will be strictly positive). Declaration public Q(BigInteger numerator, BigInteger denominator) Parameters Type Name Description BigInteger numerator The numerator of the rational number. BigInteger denominator The denominator of the rational number. | Edit this page View Source Q(BigInteger, BigInteger, bool) Protected constructor for a rational number with the specified numerator and denominator. Declaration public Q(BigInteger numerator, BigInteger denominator, bool normalize) Parameters Type Name Description BigInteger numerator The numerator of the rational number. BigInteger denominator The denominator of the rational number. bool normalize Iff true, the rational number will be normalized to its simplest form. Remarks Caution: Setting normalize to false will result in a faulty object if any of the following conditions are not met: The numerator and denominator are coprime (i.e., their greatest common divisor is 1). The denominator is greater than 0. If unsure if above conditions hold, use the public constructor Q(BigInteger, BigInteger) instead. If you are sure above conditions hold, you can safely set normalize to false for significantly faster execution. Properties | Edit this page View Source Abs Gets the absolute value of the current rational number. Declaration public Q Abs { get; } Property Value Type Description Q A Q representing the absolute value of the current rational number. If the rational number is negative, a new Q instance is returned with the absolute value. If the rational number is non-negative, the current instance is returned. | Edit this page View Source Denominator The denominator of the rational number, guaranteed to be positive in normalized form. Declaration public BigInteger Denominator { get; } Property Value Type Description BigInteger | Edit this page View Source FractionalPart Declaration public Q FractionalPart { get; } Property Value Type Description Q The fractional part of the rational number, obtained by subtracting the integer part. | Edit this page View Source IntegralPart The integral (integer) part of a rational number Declaration public BigInteger IntegralPart { get; } Property Value Type Description BigInteger Remarks In general mathematics, the concept of \"integral part\" is not objectively defined, since it has two possible interpretations (or modes). These interpretations are defined by whether we regard the set of all pure fractions to include the number 1 or not. We denote these interpretations (modes) as FEO (Fractions Exclude One) and FIO (Fractions Include One), respectively. For instance, in decimal, the number 1 could have the following two interpretations: 1 = 1.000000... (FEO) 1 = 0.999999... (FIO) In FEO the number 1 is a purely integral number, with integral part=1 and fractional part=0. In FIO the number 1 is a purely fractional number, with integral part=0 and fractional part=1. Irrespective of the mode, any number is always the sum of its integral and fractional parts. In FIO, all numbers will have a non-zero-terminating expansion. In FEO, any number that can terminate (with an ultimately infinite expansion of zeros) will do so. Only numbers with a period of 0, can have different representations in FIO and FEO. To make IntegralPart and FractionalPart well defined, yet allow access to both FIO and FEO, we assign FEO to all positive numbers, and FIO to all negative numbers and zero. This will make all members of Q have only one correct expansion. This whole logic is completely governed by the implementation of IntegralPart. Hence, we do not need to manage modes anywhere in the code base. To instead swap behavior (positive numbers = FIO and negative numbers = FEO) we can change IntegralPart to the following: public BigInteger IntegralPart => IsPositiveInteger ? (Numerator / Denominator) - 1 : (Numerator / Denominator); Examples Q Expansion Mode 0 .0000000000000000 FEO=FIO, in any base 1₂ 1.000000000000000 FEO -1₂ .1111111111111111 FIO 103/16₂ 110.0111000000000 FEO -103/16₂ 110.0110111111111 FIO 5/24₂ .0011010101010101 FEO=FIO -5/24₂ .0011010101010101 FEO=FIO 3/45₅ .3333333333333333 FEO=FIO -3/45₅ .3333333333333333 FEO=FIO 537/11₃ 1210.211002110021 FEO=FIO -537/11₃ 1210.211002110021 FEO=FIO See Also ToStringExpanded(int) | Edit this page View Source IntegralPartAlwaysFEO This version always sets FEO mode. Declaration protected BigInteger IntegralPartAlwaysFEO { get; } Property Value Type Description BigInteger | Edit this page View Source IsInteger Indicates whether the rational number is an integer. Declaration public bool IsInteger { get; } Property Value Type Description bool | Edit this page View Source IsNaN Indicates whether the rational number is NaN (not a number), indicated by a zero denominator. Declaration public bool IsNaN { get; } Property Value Type Description bool | Edit this page View Source IsNegative Indicates whether the rational number is negative. Declaration public bool IsNegative { get; } Property Value Type Description bool | Edit this page View Source IsNegativeInteger Indicates whether the rational number is a negative integer. Declaration public bool IsNegativeInteger { get; } Property Value Type Description bool | Edit this page View Source IsNonZeroInteger Indicates whether the rational number is a non-zero integer. Declaration public bool IsNonZeroInteger { get; } Property Value Type Description bool | Edit this page View Source IsOne Indicates whether the rational number is equal to one. Declaration public bool IsOne { get; } Property Value Type Description bool | Edit this page View Source IsPositive Indicates whether the rational number is positive. Declaration public bool IsPositive { get; } Property Value Type Description bool | Edit this page View Source IsPositiveInteger Indicates whether the rational number is a positive integer. Declaration public bool IsPositiveInteger { get; } Property Value Type Description bool | Edit this page View Source IsUnitFraction Indicates whether the rational number is a unit fraction. Declaration public bool IsUnitFraction { get; } Property Value Type Description bool Remarks Unit fractions are strictly positive, meaning -1/10 is not a unit fraction. | Edit this page View Source IsZero Indicates whether the rational number is zero. Declaration public bool IsZero { get; } Property Value Type Description bool | Edit this page View Source NaN Declaration public static Q NaN { get; } Property Value Type Description Q Represents a NaN (not a number) denoting an invalid number. NaN is return value of operations that are not defined (e.g. when dividing by zero) | Edit this page View Source Numerator The numerator of the rational number. Declaration public BigInteger Numerator { get; } Property Value Type Description BigInteger | Edit this page View Source One Declaration public static Q One { get; } Property Value Type Description Q Represents the rational number one. | Edit this page View Source Reciprocal Reciprocal of this rational number. Declaration public Q Reciprocal { get; } Property Value Type Description Q Remarks The reciprocal of a rational number a/b is b/a. Returns NaN if the numerator is 0. | Edit this page View Source Sign Sign of the current rational number. Declaration public int Sign { get; } Property Value Type Description int An integer that indicates the sign of the current rational number. Returns -1 if the number is negative, 0 if the number is zero, and 1 if the number is positive. | Edit this page View Source Zero Declaration public static Q Zero { get; } Property Value Type Description Q Represents the rational number zero. Methods | Edit this page View Source Backward(int) Obsolete: This method is obsolete and will be removed. Declaration [Obsolete(\"This method is obsolete and will be removed\")] public Q Backward(int base_) Parameters Type Name Description int base_ Returns Type Description Q | Edit this page View Source Coeff(int) The value of the rational number in the specified base. Declaration public BigInteger Coeff(int base_) Parameters Type Name Description int base_ The base to convert to. Returns Type Description BigInteger The coefficient of the rational number in the specified base. | Edit this page View Source Coefficients(int) Light version of Coefficients() that takes a rational number and a base. Declaration public IEnumerable<int> Coefficients(int base_) Parameters Type Name Description int base_ The base to convert to. Returns Type Description IEnumerable<int> An enumerable sequence of integers representing the coefficients of the rational number in the specified base. Remarks This method does not require the costly creation of a Qb. See Also Coefficients() ShiftedFractions() | Edit this page View Source CompareTo(Q?) Compares the current rational number to another rational number. Declaration public int CompareTo(Q? other) Parameters Type Name Description Q other The rational number to compare with. Returns Type Description int An integer that indicates the relative order of the current rational number and the specified rational number. | Edit this page View Source CompareTo(int) Compares the current rational number to an int. Declaration public int CompareTo(int integer) Parameters Type Name Description int integer The int to compare with. Returns Type Description int An integer that indicates the relative order of the current rational number and integer. | Edit this page View Source CompareTo(BigInteger) Compares the current rational number to a BigInteger. Declaration public int CompareTo(BigInteger integer) Parameters Type Name Description BigInteger integer The BigInteger to compare with. Returns Type Description int An integer that indicates the relative order of the current rational number and the specified BigInteger. | Edit this page View Source Equals(Q?) Indicates whether the current rational number is equal to another rational number. Declaration public bool Equals(Q? other) Parameters Type Name Description Q other The rational number to compare with. Returns Type Description bool true iff the current rational number is equal to the specified rational number. | Edit this page View Source Equals(object?) Indicates whether the current instance is equal to a specified object. Declaration public override bool Equals(object? obj) Parameters Type Name Description object obj The object to compare with the current instance. Returns Type Description bool true iff the current instance is equal to the specified object obj. Overrides object.Equals(object) | Edit this page View Source Forward(int) Obsolete: This method is obsolete and will be removed. Declaration [Obsolete(\"This method is obsolete and will be removed\")] public Q Forward(int base_) Parameters Type Name Description int base_ Returns Type Description Q | Edit this page View Source GetHashCode() Returns the hash code for the current instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for the current instance. Overrides object.GetHashCode() | Edit this page View Source GetPAdicPreperiodic(Q, BaseInt, int) Declaration public static BaseInt GetPAdicPreperiodic(Q pAdicPreperiodicQ, BaseInt pAryPreperiodic, int firstExponent) Parameters Type Name Description Q pAdicPreperiodicQ BaseInt pAryPreperiodic int firstExponent Returns Type Description BaseInt | Edit this page View Source InBase(int) Extends the current rational number to a Qb with the specified base. Declaration public Qb InBase(int base_) Parameters Type Name Description int base_ The base to convert to. Returns Type Description Qb A new Qb representing the current rational number in the specified base. | Edit this page View Source IntegralPartSelective(bool) This version selects between FIO and FEO mode. Declaration protected BigInteger IntegralPartSelective(bool fio) Parameters Type Name Description bool fio If true FIO mode, otherwise FEO mode Returns Type Description BigInteger Remarks This property needs to replace the existing version to come in to effect. Current implementation is provided only to give an understanding. | Edit this page View Source Negation(bool) Conditionally negates the current rational number. Declaration public Q Negation(bool negate) Parameters Type Name Description bool negate A boolean value indicating whether to negate the rational number. Returns Type Description Q A new Q representing the negative value if negate is true; otherwise, returns the current instance. | Edit this page View Source PAdicInterpretation(BaseInt, BaseInt, int) Declaration public static Q PAdicInterpretation(BaseInt pAdicPreperiodic, BaseInt pAdicPeriodic, int firstExponent = 0) Parameters Type Name Description BaseInt pAdicPreperiodic BaseInt pAdicPeriodic int firstExponent Returns Type Description Q | Edit this page View Source PAdicPeriodic(BaseInt, int) Declaration public static Q PAdicPeriodic(BaseInt pAdicPeriodic, int firstPeriodicExponent) Parameters Type Name Description BaseInt pAdicPeriodic int firstPeriodicExponent Returns Type Description Q | Edit this page View Source PAdicPreperiodic(BaseInt, int) Declaration public static Q PAdicPreperiodic(BaseInt pAdicPreperiodic, int firstExponent = 0) Parameters Type Name Description BaseInt pAdicPreperiodic int firstExponent Returns Type Description Q | Edit this page View Source PAryInterpretation(bool, BaseInt, BaseInt, int) Returns a Q from the given parts of a base-specific expansion. Declaration public static Q PAryInterpretation(bool negative, BaseInt pAryPreperiodic, BaseInt pAryPeriodic, int firstExponent = -1) Parameters Type Name Description bool negative A boolean indicating if the number is negative. BaseInt pAryPreperiodic The preperiodic part as an integer. BaseInt pAryPeriodic The periodic part as an integer. int firstExponent The exponent index of the first coefficient of the number. Returns Type Description Q A new Q representing the rational number derived from the given parts. Remarks This method derives the Numerator and Denominator from the given parameters. | Edit this page View Source PAryPeriodic(bool, BaseInt, int) Declaration public static Q PAryPeriodic(bool negative, BaseInt pAryPeriodic, int firstPeriodicExponent) Parameters Type Name Description bool negative BaseInt pAryPeriodic int firstPeriodicExponent Returns Type Description Q | Edit this page View Source PAryPreperiodic(bool, BaseInt, int) Declaration public static Q PAryPreperiodic(bool negative, BaseInt pAryPreperiodic, int firstExponent = -1) Parameters Type Name Description bool negative BaseInt pAryPreperiodic int firstExponent Returns Type Description Q | Edit this page View Source Pow(Q) Raises the current rational number to the power of the given exponent. Declaration public Q Pow(Q exponent) Parameters Type Name Description Q exponent The exponent to which to raise the current rational number. Returns Type Description Q A new rational number representing the result of the exponentiation. | Edit this page View Source Pow(int) Raises the current rational number to the power of the given integer exponent. Declaration public Q Pow(int exponent) Parameters Type Name Description int exponent The integer exponent to which to raise the current rational number. Returns Type Description Q A new rational number representing the result of the exponentiation. | Edit this page View Source ShiftedFractions(int) Light version of ShiftedFractions() that takes a rational number and a base. Declaration public IEnumerable<(BigInteger Integer, Q Fraction)> ShiftedFractions(int base_) Parameters Type Name Description int base_ The base to convert to. Returns Type Description IEnumerable<(BigInteger Integer, Q Fraction)> An enumerable sequence of tuples, where each tuple contains the integer part and the fractional part of the rational number in the specified base. Remarks This method does not require the costly creation of a Qb. See Also ShiftedFractions() | Edit this page View Source Square() Returns the square of the current rational number. Declaration public Q Square() Returns Type Description Q A new rational number representing the square of the current rational number. | Edit this page View Source ToString() Returns the default string representation of the rational number Declaration public override string ToString() Returns Type Description string Overrides object.ToString() | Edit this page View Source ToStringCanonical() Returns the rational number as a simple canonical representation in base 10. Declaration public string ToStringCanonical() Returns Type Description string A string representing the rational number (in base 10) in the format \"numerator/denominator\" or just \"numerator\" if the denominator is 1. Remarks An NaN rational number will yield the string NaN Examples Console.WriteLine(new Q(-4,5).ToStringCanonical()); //outputs \"-4/5\" | Edit this page View Source ToStringFactorization() Converts the factorization of the rational number to a string representation. Declaration public string ToStringFactorization() Returns Type Description string A string representing the factorization of the rational number. | Edit this page View Source ToStringFinite(int) Declaration public string ToStringFinite(int base_) Parameters Type Name Description int base_ Returns Type Description string | Edit this page View Source TryCastToInt32(out int) Attempts to cast the rational number to a 32-bit integer, if possible. Declaration public bool TryCastToInt32(out int result) Parameters Type Name Description int result The resulting 32-bit integer if the cast is successful. Returns Type Description bool true iff the cast is successful. Operators | Edit this page View Source operator +(Q, Q) Sum of two rational numbers. Declaration public static Q operator +(Q a, Q b) Parameters Type Name Description Q a The first term. Q b The second term. Returns Type Description Q A new rational number representing the sum of a and b. | Edit this page View Source operator +(Q, BigInteger) Sum of a rational number and an integer. Declaration public static Q operator +(Q q, BigInteger integer) Parameters Type Name Description Q q A rational number denoting the first term. BigInteger integer A BigInteger denoting the second term. Returns Type Description Q A new rational number representing the sum of q and integer. | Edit this page View Source operator +(BigInteger, Q) Sum of an integer and a rational number. Declaration public static Q operator +(BigInteger integer, Q q) Parameters Type Name Description BigInteger integer A BigInteger denoting the first term. Q q A rational number denoting the second term. Returns Type Description Q A new rational number representing the sum of integer and q. | Edit this page View Source operator --(Q) Decrements this rational number by one. Declaration public static Q operator --(Q a) Parameters Type Name Description Q a The rational number to decrement. Returns Type Description Q A new rational number representing the result of the decrement. | Edit this page View Source operator /(Q, Q) Quotient of two rational numbers. Declaration public static Q operator /(Q a, Q b) Parameters Type Name Description Q a The dividend. Q b The divisor. Returns Type Description Q A new rational number representing the quotient of a and b. | Edit this page View Source operator /(Q, BigInteger) Quotient of a rational number and an integer. Declaration public static Q operator /(Q q, BigInteger integer) Parameters Type Name Description Q q A rational number denoting the dividend. BigInteger integer A BigInteger denoting the divisor. Returns Type Description Q A new rational number representing the quotient of q and integer. | Edit this page View Source operator /(BigInteger, Q) Quotient of am integer and rational number. Declaration public static Q operator /(BigInteger integer, Q q) Parameters Type Name Description BigInteger integer A BigInteger denoting the dividend. Q q A rational number denoting the divisor. Returns Type Description Q A new rational number representing the quotient of integer and q. | Edit this page View Source operator ==(Q, Q) Indicates whether two rational numbers are equal. Declaration public static bool operator ==(Q a, Q b) Parameters Type Name Description Q a The first rational number. Q b The second rational number. Returns Type Description bool true iff the two rational numbers are equal. | Edit this page View Source operator ==(Q, int) Indicates whether the current rational number is equal to a specified int. Declaration public static bool operator ==(Q q, int integer) Parameters Type Name Description Q q The rational number to compare. int integer The int to compare. Returns Type Description bool true iff the current rational number is equal to the specified integer. | Edit this page View Source operator ==(Q, BigInteger) Indicates whether the current rational number is equal to a specified BigInteger. Declaration public static bool operator ==(Q q, BigInteger integer) Parameters Type Name Description Q q The rational number to compare. BigInteger integer The BigInteger to compare. Returns Type Description bool true iff the current rational number is equal to integer. | Edit this page View Source operator >(Q, Q) Indicates whether the current rational number is greater than another rational number. Declaration public static bool operator >(Q a, Q b) Parameters Type Name Description Q a The first rational number. Q b The second rational number. Returns Type Description bool true iff the current rational number is greater than the specified rational number. | Edit this page View Source operator >(Q, int) Indicates whether the current rational number is greater than a specified int. Declaration public static bool operator >(Q q, int integer) Parameters Type Name Description Q q The current rational number. int integer The int to compare. Returns Type Description bool true iff the current rational number is greater than the specified integer. | Edit this page View Source operator >(Q, BigInteger) Indicates whether the current rational number is greater than a BigInteger. Declaration public static bool operator >(Q q, BigInteger integer) Parameters Type Name Description Q q The current rational number. BigInteger integer The BigInteger to compare. Returns Type Description bool true iff the current rational number is greater than the specified integer. | Edit this page View Source operator >=(Q, Q) Indicates whether the current rational number is greater than or equal to another rational number. Declaration public static bool operator >=(Q a, Q b) Parameters Type Name Description Q a The first rational number. Q b The second rational number. Returns Type Description bool true iff the current rational number is greater than or equal to the specified rational number. | Edit this page View Source operator >=(Q, int) Indicates whether the current rational number is greater than or equal to a specified int. Declaration public static bool operator >=(Q q, int integer) Parameters Type Name Description Q q The current rational number. int integer The int to compare. Returns Type Description bool true iff the current rational number is greater than or equal to integer. | Edit this page View Source operator >=(Q, BigInteger) Indicates whether the current rational number is greater than or equal to a BigInteger. Declaration public static bool operator >=(Q q, BigInteger integer) Parameters Type Name Description Q q The current rational number. BigInteger integer The BigInteger to compare. Returns Type Description bool true iff the current rational number is greater than or equal to the specified integer. | Edit this page View Source operator ++(Q) Increments this rational number by one. Declaration public static Q operator ++(Q a) Parameters Type Name Description Q a The rational number to increment. Returns Type Description Q A new rational number representing the result of the increment. | Edit this page View Source operator !=(Q, Q) Indicates whether two rational numbers are not equal. Declaration public static bool operator !=(Q a, Q b) Parameters Type Name Description Q a The first rational number. Q b The second rational number. Returns Type Description bool true iff the two rational numbers are not equal. | Edit this page View Source operator !=(Q, int) Indicates whether the current rational number is not equal to a specified int. Declaration public static bool operator !=(Q q, int integer) Parameters Type Name Description Q q The rational number to compare. int integer The int to compare. Returns Type Description bool true iff the current rational number is not equal to integer. | Edit this page View Source operator !=(Q, BigInteger) Indicates whether the current rational number is not equal to a specified BigInteger. Declaration public static bool operator !=(Q q, BigInteger integer) Parameters Type Name Description Q q The rational number to compare. BigInteger integer The BigInteger to compare. Returns Type Description bool true if the current rational number is not equal to the specified integer. | Edit this page View Source operator <<(Q, int) Performs a left bitwise shift on the current rational number. Declaration public static Q operator <<(Q a, int shift) Parameters Type Name Description Q a The rational number to shift. int shift The number of bits to shift. A positive value shifts left, a negative value shifts right. Returns Type Description Q A new rational number representing the result of the shift operation. Remarks If shift is negative, the shift direction will be reversed, making this operation equivalent to a right shift. This behavior mirrors the standard behavior of the C# operators << and >> for integral types, where negative values reverse the shift direction. | Edit this page View Source operator <(Q, Q) Indicates whether the current rational number is less than another rational number. Declaration public static bool operator <(Q a, Q b) Parameters Type Name Description Q a The first rational number. Q b The second rational number. Returns Type Description bool true iff the current rational number is less than the specified rational number. | Edit this page View Source operator <(Q, int) Indicates whether the current rational number is less than an int. Declaration public static bool operator <(Q q, int integer) Parameters Type Name Description Q q The current rational number. int integer The int to compare. Returns Type Description bool true iff the current rational number is less than integer. | Edit this page View Source operator <(Q, BigInteger) Indicates whether the current rational number is less than a BigInteger. Declaration public static bool operator <(Q q, BigInteger integer) Parameters Type Name Description Q q The current rational number. BigInteger integer The BigInteger to compare. Returns Type Description bool true iff the current rational number is less than the specified integer. | Edit this page View Source operator <=(Q, Q) Indicates whether the current rational number is less than or equal to another rational number. Declaration public static bool operator <=(Q a, Q b) Parameters Type Name Description Q a The first rational number. Q b The second rational number. Returns Type Description bool true iff the current rational number is less than or equal to the specified rational number | Edit this page View Source operator <=(Q, int) Indicates whether the current rational number is less than or equal to an int. Declaration public static bool operator <=(Q q, int integer) Parameters Type Name Description Q q The current rational number. int integer The int to compare. Returns Type Description bool true iff the current rational number is less than or equal to the specified integer. | Edit this page View Source operator <=(Q, BigInteger) Indicates whether the current rational number is less than or equal to a BigInteger. Declaration public static bool operator <=(Q q, BigInteger integer) Parameters Type Name Description Q q The current rational number. BigInteger integer The BigInteger to compare. Returns Type Description bool true iff the current rational number is less than or equal to the specified integer. | Edit this page View Source operator %(Q, Q) Performs the modulus operation on two rational numbers. Declaration public static Q operator %(Q a, Q b) Parameters Type Name Description Q a The left operand. Q b The right operand. Returns Type Description Q The modulus of a and b as a Q. Remarks The formula for the modulus operation is: (a_n / a_d) % (b_n / b_d) = ((a_n * b_d) % (a_d * b_n)) / (a_d * b_d) where a_n and a_d are the numerator and denominator of a respectively, and b_n and b_d are the numerator and denominator of b respectively. | Edit this page View Source operator *(Q, Q) Product of two rational numbers. Declaration public static Q operator *(Q a, Q b) Parameters Type Name Description Q a The first factor. Q b The second factor. Returns Type Description Q A new rational number representing the product of a and b. | Edit this page View Source operator *(Q, BigInteger) Product of a rational number and an integer. Declaration public static Q operator *(Q q, BigInteger integer) Parameters Type Name Description Q q A rational number denoting the first factor. BigInteger integer A BigInteger denoting the second factor. Returns Type Description Q A new rational number representing the product of q and integer. | Edit this page View Source operator *(BigInteger, Q) Product of an integer and a rational number. Declaration public static Q operator *(BigInteger integer, Q q) Parameters Type Name Description BigInteger integer A BigInteger denoting the first factor. Q q A rational number denoting the second factor. Returns Type Description Q A new rational number representing the product of integer and q . | Edit this page View Source operator >>(Q, int) Performs a right bitwise shift on the current rational number. Declaration public static Q operator >>(Q a, int shift) Parameters Type Name Description Q a The rational number to shift. int shift The number of bits to shift. A positive value shifts right, a negative value shifts left. Returns Type Description Q A new rational number representing the result of the shift operation. Remarks If shift is negative, the shift direction will be reversed, making this operation equivalent to a left shift. This behavior mirrors the standard behavior of the C# operators << and >> for integral types, where negative values reverse the shift direction. | Edit this page View Source operator -(Q, Q) Difference of two rational numbers. Declaration public static Q operator -(Q a, Q b) Parameters Type Name Description Q a The minuend. Q b The subtrahend. Returns Type Description Q A new rational number representing the difference between a and b. | Edit this page View Source operator -(Q, BigInteger) Difference of a rational number and an integer. Declaration public static Q operator -(Q q, BigInteger integer) Parameters Type Name Description Q q A rational number denoting the minuend. BigInteger integer A BigInteger denoting the subtrahend. Returns Type Description Q A new rational number representing the difference of q and integer. | Edit this page View Source operator -(BigInteger, Q) Difference of an integer and a rational number. Declaration public static Q operator -(BigInteger integer, Q q) Parameters Type Name Description BigInteger integer A BigInteger denoting the minuend. Q q A rational number denoting the subtrahend. Returns Type Description Q A new rational number representing the difference of integer and q. | Edit this page View Source operator -(Q) Negation of this rational number. Declaration public static Q operator -(Q a) Parameters Type Name Description Q a The rational number to negate. Returns Type Description Q A new rational number representing the negated value. Implements IEquatable<T> IComparable<T>"
  },
  "MathLib.QTuple.html": {
    "href": "MathLib.QTuple.html",
    "title": "Class QTuple | MathLib Docs",
    "keywords": "Class QTuple Inheritance object QTuple Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MathLib Assembly: MathLib.dll Syntax public class QTuple Constructors | Edit this page View Source QTuple(Q, int) Declaration public QTuple(Q q, int base_) Parameters Type Name Description Q q int base_ Properties | Edit this page View Source A Declaration public Q A { get; } Property Value Type Description Q | Edit this page View Source B Declaration public Q B { get; } Property Value Type Description Q | Edit this page View Source Base Declaration public int Base { get; } Property Value Type Description int"
  },
  "MathLib.Qb.html": {
    "href": "MathLib.Qb.html",
    "title": "Class Qb | MathLib Docs",
    "keywords": "Class Qb Represents a rational number with a base-dependent expansion, denoted ℚb. Inheritance object Q Qb Implements IEquatable<Q> IComparable<Q> IEquatable<Qb> Inherited Members Q.IsNaN Q.IsZero Q.IsOne Q.IsPositive Q.IsNegative Q.IsInteger Q.IsNonZeroInteger Q.IsPositiveInteger Q.IsNegativeInteger Q.IsUnitFraction Q.Equals(Q) Q.CompareTo(Q) Q.CompareTo(BigInteger) Q.CompareTo(int) Q.Equals(object) Q.GetHashCode() Q.Numerator Q.Denominator Q.IntegralPart Q.FractionalPart Q.Zero Q.One Q.PAryInterpretation(bool, BaseInt, BaseInt, int) Q.PAdicInterpretation(BaseInt, BaseInt, int) Q.PAryPreperiodic(bool, BaseInt, int) Q.PAdicPreperiodic(BaseInt, int) Q.PAryPeriodic(bool, BaseInt, int) Q.PAdicPeriodic(BaseInt, int) Q.GetPAdicPreperiodic(Q, BaseInt, int) Q.InBase(int) Q.ShiftedFractions(int) Q.Coefficients(int) Q.Coeff(int) Q.Backward(int) Q.Forward(int) Q.Sign Q.Reciprocal Q.Negation(bool) Q.Square() Q.Abs Q.Pow(Q) Q.Pow(int) Q.TryCastToInt32(out int) Q.IntegralPartAlwaysFEO Q.IntegralPartSelective(bool) Q.ToStringCanonical() Q.ToStringFactorization() Q.ToStringFinite(int) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: MathLib Assembly: MathLib.dll Syntax public class Qb : Q, IEquatable<Q>, IComparable<Q>, IEquatable<Qb> Remarks The class Qb extends Q by adopting a base, and thus defining a base-specific coefficient expansion of the rational number, with a preperiodic and a periodic part. These types of expansions are commonly used in numeral systems like p-ary expansions (e.g. decimal or binary) or in p-adic systems. Each number is expressed in terms of a base, denoted by Base, with a preperiodic part (initial terminating sequence) and a periodic part (repeating sequence). Each coefficient is indexed according to the exponent of the base Base. The index i corresponds to the coefficient c_i associated with the term c_i * Base^i, where the value of i decreases as we move from left to right in the expansion. The first (leftmost) coefficient has index FirstExponent, which corresponds to the largest exponent. The index decreases through the expansion, reflecting the successive exponents of the base, including negative exponents for terms after the radix point (radix point occurs between c_0 and c_-1). This consistent indexing system aligns with the mathematical representation of the number as a series in base Base: q = Σ (c_i * Base^i) where the index i decreases from FirstExponent to negative values as the expansion proceeds. Overview of concepts and properties, for a full (ultimately periodic) expansion: |--------------------------------------------------------| Indexes (example): |-- 7 6 5 4 3 2 1 0 -1 -2 -3 -4 -5 --| Numeric parts: |-- IntegralPart --|-- FractionalPart --| Length properties: |-- IntegralLength --|-- FractionalLength --| Numeric parts: |-- PreperiodicPart --|-- PeriodicPart --| Length properties: |-- PreperiodicLength --|-- Period --| |-- Length --| Indexes (Exponents): • (FirstExponent=8) • (FirstPeriodicExponent=-2) • (Radix point, after c_0) The class methods must never throw exceptions for arithmetic operations. Instead, they return NaN for undefined results (such as from divide by zero). Constructors | Edit this page View Source Qb(Q, int) Extends a rational number to a Qb extension with the specific base base_. Declaration public Qb(Q q, int base_) Parameters Type Name Description Q q A rational number of type Q int base_ The base of the rational number extension. | Edit this page View Source Qb(bool, BaseInt, BaseInt, int) Constructor that creates a Qb from the defining parts of a base-specific expansion. Declaration public Qb(bool negative, BaseInt prePeriodicPart, BaseInt periodicPart, int firstExponent = -1) Parameters Type Name Description bool negative A boolean indicating if the number is negative. BaseInt prePeriodicPart The preperiodic part as a BaseInt. BaseInt periodicPart The periodic part as a BaseInt>. int firstExponent The exponent index of the first coefficient of the number. Remarks This constructor will derive the Numerator and Denominator from the parts. | Edit this page View Source Qb(BigInteger, BigInteger, int) Constructor for a Qb that takes a numerator, denominator and a base. The rational number is automatically normalized to its simplest form. Declaration public Qb(BigInteger numerator, BigInteger denominator, int base_) Parameters Type Name Description BigInteger numerator The numerator of the rational number. BigInteger denominator The denominator of the rational number. Must be non-zero. int base_ The base of the rational number extension. Remarks If you already have an object of type Q, then the constructor Qb(Q, int) will be faster. Or alternatively, you can simply call InBase(int) on the Q instance Properties | Edit this page View Source Base Gets the base of the rational number extension. Declaration public int Base { get; } Property Value Type Description int | Edit this page View Source FirstExponent Index (= exponent value) of the first coefficient (of the base Base expansion) Declaration public int FirstExponent { get; } Property Value Type Description int Remarks This value is simply the length of IntegralPart - 1: The range of possible values is [-1..∞[, since a number either starts before the radix point, or directly after it. The coefficient at index FirstExponent is the true first coefficient in the expansion, which can be zero iffFirstExponent is -1. Formula: FirstExponent = IntegralPart.Length(Base) - 1 | Edit this page View Source FirstPeriodicExponent Index (= exponent value) of the first coefficient of the periodic part (of the base B expansion). Declaration public int FirstPeriodicExponent { get; } Property Value Type Description int | Edit this page View Source FractionalLength Length of the fractional part (of the base B expansion). Declaration public int FractionalLength { get; } Property Value Type Description int | Edit this page View Source FullInteger Numeric concatenation of the preperiodic and periodic parts. Declaration public BaseInt FullInteger { get; } Property Value Type Description BaseInt | Edit this page View Source IntegralLength Length of the integer part (of the base B expansion). Declaration public int IntegralLength { get; } Property Value Type Description int Remarks This value is simply the base-specific length of IntegralPart. Formula: IntegralLength = IntegralPart.Length(Base) | Edit this page View Source Length Total length of the preperiodic and periodic parts (of the base B expansion). Declaration public int Length { get; } Property Value Type Description int | Edit this page View Source NaN Returns a NaN Qb instance. Declaration public static Qb NaN { get; } Property Value Type Description Qb | Edit this page View Source Period Length of the periodic part (of the base B expansion). Declaration public int Period { get; } Property Value Type Description int | Edit this page View Source PeriodicPart The periodic part. Declaration public BaseInt PeriodicPart { get; } Property Value Type Description BaseInt Remarks Contains the periodic coefficients (including zero-padding), and the period (=length of the periodic part). | Edit this page View Source PreperiodicLength Length of the preperiodic part (of the base B expansion). Declaration public int PreperiodicLength { get; } Property Value Type Description int | Edit this page View Source PreperiodicPart The preperiodic part. Declaration public BaseInt PreperiodicPart { get; } Property Value Type Description BaseInt Remarks Contains the preperiodic coefficients (including zero-padding), and the length of the preperiodic part. Methods | Edit this page View Source Coefficients() Returns the coefficient (or digit) expansion of a rational number in the specified base, expressed as a sequence of integers (modulo b). Declaration public IEnumerable<int> Coefficients() Returns Type Description IEnumerable<int> An enumerable sequence of integers representing the coefficients in base Base. Remarks The coefficients are obtained from the fractional expansions generated by recursively shifting the radix point of the rational number in base Base. Specifically, the coefficients are derived by taking the ShiftedFractions() and scaling them to the range [0..Base-1]. Thus, each coefficient is a number modulo Base. | Edit this page View Source Equals(Qb?) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Qb? other) Parameters Type Name Description Qb other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. | Edit this page View Source RepetendShiftLeft() Returns a new Q with a repetend (interpreted as an integer) that is base shifted 1 step to the left compared to the original repetend (interpreted as an integer). Declaration public Q RepetendShiftLeft() Returns Type Description Q A new Q instance with the base-shifted repetend. | Edit this page View Source RepetendShiftRight() Returns a new Q with a repetend (interpreted as an integer) that is base shifted 1 step to the right compared to the original repetend (interpreted as an integer). Declaration public Q RepetendShiftRight() Returns Type Description Q A new Q instance with the base-shifted repetend. | Edit this page View Source ShiftedFractions() Returns the left-to-right expansion of the rational number in the specified base as an infinite sequence of fractions. Each fraction corresponds to the fractional part remaining after successive base-specific left shifts. Declaration public IEnumerable<(BigInteger Integer, Q Fraction)> ShiftedFractions() Returns Type Description IEnumerable<(BigInteger Integer, Q Fraction)> An enumerable sequence of rational numbers representing the shifted fractional parts in base Base. Remarks This method first applies a normalization step to the rational number, effectively shifting the radix point to the right (in base Base), such that the integer part is zero, leaving only the fractional part. The first element of the sequence is this fractional remainder. Subsequently, at each step, the fractional part is shifted left by the base (* Base), and the next fractional part is extracted by removing the integer part. This process generates an infinite sequence of fractional remainders, which represent the underlying structure of the rational number in the given base. These fractions can be used to derive coefficients or compute the period of the expansion. | Edit this page View Source ToString() Returns the default string representation of the rational number Declaration public override string ToString() Returns Type Description string Overrides Q.ToString() | Edit this page View Source ToStringExpanded(int) Converts the current instance of Qb to its expanded string representation in the given base. Declaration public string ToStringExpanded(int coefficientCount = 16) Parameters Type Name Description int coefficientCount The number of coefficients to include, starting from the leftmost. (default=16) Returns Type Description string The expanded string representation of the current instance of Qb. Remarks The sign of a number is not encoded by (contained in) the expanded representation, since some Q and -Q can have the same string representation. However, negative numbers, completes the generation, by enabling us to generate all ultimately periodic expansions, including those that are not covered by the positive rational numbers. Examples Q Expansion Mode 0 .0000000000000000 FEO=FIO, in any base 1₂ 1.000000000000000 FEO -1₂ .1111111111111111 FIO 103/16₂ 110.0111000000000 FEO -103/16₂ 110.0110111111111 FIO 5/24₂ .0011010101010101 FEO=FIO -5/24₂ .0011010101010101 FEO=FIO 3/45₅ .3333333333333333 FEO=FIO -3/45₅ .3333333333333333 FEO=FIO 537/11₃ 1210.211002110021 FEO=FIO -537/11₃ 1210.211002110021 FEO=FIO | Edit this page View Source ToStringExpandedSigned(int) Declaration public string ToStringExpandedSigned(int coefficientCount = 16) Parameters Type Name Description int coefficientCount Returns Type Description string | Edit this page View Source ToStringPeriodic() Declaration public string ToStringPeriodic() Returns Type Description string | Edit this page View Source ToStringRepetend() Declaration public string ToStringRepetend() Returns Type Description string | Edit this page View Source ToStringRotations() Declaration public string ToStringRotations() Returns Type Description string Implements IEquatable<T> IComparable<T> IEquatable<T>"
  },
  "MathLib.Qp.html": {
    "href": "MathLib.Qp.html",
    "title": "Class Qp | MathLib Docs",
    "keywords": "Class Qp Represents p-adic numbers that are rational, denoted ℚ⊂ℚₚ. Inheritance object Q Qp Implements IEquatable<Q> IComparable<Q> Inherited Members Q.IsNaN Q.IsZero Q.IsOne Q.IsPositive Q.IsNegative Q.IsInteger Q.IsNonZeroInteger Q.IsPositiveInteger Q.IsNegativeInteger Q.IsUnitFraction Q.Equals(Q) Q.CompareTo(Q) Q.CompareTo(BigInteger) Q.CompareTo(int) Q.Equals(object) Q.GetHashCode() Q.Numerator Q.Denominator Q.IntegralPart Q.FractionalPart Q.Zero Q.One Q.PAryInterpretation(bool, BaseInt, BaseInt, int) Q.PAdicInterpretation(BaseInt, BaseInt, int) Q.PAryPreperiodic(bool, BaseInt, int) Q.PAdicPreperiodic(BaseInt, int) Q.PAryPeriodic(bool, BaseInt, int) Q.PAdicPeriodic(BaseInt, int) Q.GetPAdicPreperiodic(Q, BaseInt, int) Q.InBase(int) Q.ShiftedFractions(int) Q.Coefficients(int) Q.Coeff(int) Q.Backward(int) Q.Forward(int) Q.Sign Q.Reciprocal Q.Negation(bool) Q.Square() Q.Abs Q.Pow(Q) Q.Pow(int) Q.TryCastToInt32(out int) Q.IntegralPartAlwaysFEO Q.IntegralPartSelective(bool) Q.ToStringCanonical() Q.ToStringFactorization() Q.ToStringFinite(int) object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: MathLib Assembly: MathLib.dll Syntax public class Qp : Q, IEquatable<Q>, IComparable<Q> Remarks In mathematics, the set of p-adic numbers ℚₚ is the completion of the rational numbers ℚ with respect to the p-adic norm. This completion includes both rational numbers and p-adic irrationals (limits of infinite p-adic expansions). However, in this library, the Qp class is restricted to representing only the rational numbers within ℚₚ (which can be finitely represented in a computer). Consequently, it handles p-adic numbers whose expansions are finite or ultimately periodic, corresponding exactly to elements of ℚ This means that while ℚₚ is uncountable and includes numbers that cannot be expressed as ratios of integers (p-adic irrationals), our Qp class cannot represent these elements. It focuses on rational numbers and their representations in p-adic form. Examples A 5-adic expansion for the rational number -4/3 is: -4/3 = …2222222212₅ Constructors | Edit this page View Source Qp(BaseInt, BaseInt, int) Constructor for a p-adic number for the specified preperiodic and periodic parts, and an optional first exponent. Declaration public Qp(BaseInt pAdicPreperiodic, BaseInt pAdicPeriodic, int firstExponent = 0) Parameters Type Name Description BaseInt pAdicPreperiodic The p-adic preperiodic part of the number. BaseInt pAdicPeriodic The p-adic periodic part of the number. int firstExponent The first exponent of the number (Default value = 0). | Edit this page View Source Qp(Q, int) Constructor for a p-adic number. Declaration public Qp(Q q, int base_) Parameters Type Name Description Q q The rational number to represent as a p-adic number. int base_ The prime base of the p-adic number. | Edit this page View Source Qp(BigInteger, BigInteger, int) Declaration public Qp(BigInteger Numerator, BigInteger Denominator, int base_) Parameters Type Name Description BigInteger Numerator BigInteger Denominator int base_ Properties | Edit this page View Source Base Returns the prime base of this p-adic number. Declaration public int Base { get; } Property Value Type Description int | Edit this page View Source FirstExponent Declaration public int FirstExponent { get; } Property Value Type Description int | Edit this page View Source Generator A reverse generator that can be used to generate the coefficients of the p-adic number, in reverse order (least significant digit first). Declaration public Qb Generator { get; } Property Value Type Description Qb | Edit this page View Source NaN Returns a NaN Qp instance. Declaration public static Qp NaN { get; } Property Value Type Description Qp Methods | Edit this page View Source Coefficients() Declaration public IEnumerable<int> Coefficients() Returns Type Description IEnumerable<int> | Edit this page View Source FindKQ(Q, int) Decomposes a rational number q into an integer part k and a fractional remainder based on the specified modulus. Declaration public static (int k, Q q) FindKQ(Q q, int modulus) Parameters Type Name Description Q q The rational number to decompose, represented as an instance of Q. int modulus The modulus (or base) for the decomposition, which must be a positive integer greater than 1. Returns Type Description (int k, Q q) A tuple containing: k: An integer representing the integer component of the decomposition, in the range [0, modulus). q: The remaining fractional part of the decomposition, represented as a rational number Q. Remarks This method computes the first coefficient k in the p-adic expansion of the rational number q with respect to the specified modulus modulus (which serves as the base of the p-adic expansion). The remainder is the fractional part of the number after subtracting the integer part k and dividing by modulus. Mathematically, this method solves the equation: q = k + modulus × remainder where k is an integer in the range [0, modulus) and remainder is the fractional part of q after division by modulus. The method uses modular arithmetic to compute k efficiently by solving the congruence: k ≡ q.Numerator × (q.Denominator)⁻¹ (mod modulus) where q.Denominator⁻¹ is the modular inverse of q.Denominator with respect to modulus. Examples This example demonstrates decomposing a rational number with respect to a modulus: Q q = new Q(1, 17); (int k, Q remainder) = FindKQ(q, 5); Console.WriteLine($\"k = {k}, remainder = {remainder}\"); // Output: k = 3, remainder = -10 / 17 Exceptions Type Condition ArgumentException Thrown if q's denominator and modulus are not coprime (i.e., their greatest common divisor is not 1). | Edit this page View Source PadicCoeffs(Q, int, bool) Declaration public static IEnumerable<int> PadicCoeffs(Q q, int base_, bool yieldDelimiters = false) Parameters Type Name Description Q q int base_ bool yieldDelimiters Returns Type Description IEnumerable<int> | Edit this page View Source ReciprocalCoefficients(BigInteger, int) Generates the p-adic coefficients of the reciprocal of n in the base base_. Also returns a remainder with each coefficient. Declaration public static IEnumerable<(int coefficient, BigInteger remainder)> ReciprocalCoefficients(BigInteger n, int base_) Parameters Type Name Description BigInteger n The number whose reciprocal's p-adic expansion is computed. int base_ The prime base of the p-adic expansion. Returns Type Description IEnumerable<(int coefficient, BigInteger remainder)> An enumerable tuple sequence (coefficient, remainder). | Edit this page View Source ToString() Default string representation of the p-adic number. Declaration public override string ToString() Returns Type Description string Overrides Q.ToString() | Edit this page View Source ToStringExpanded(int) Returns a string for the p-adic number in expanded form. Declaration public string ToStringExpanded(int coefficientCount = 16) Parameters Type Name Description int coefficientCount The number of coefficients to include Returns Type Description string | Edit this page View Source ToStringPeriodic() Declaration public string ToStringPeriodic() Returns Type Description string | Edit this page View Source Valuation() p-adic valuation of the current p-adic number. Declaration public int Valuation() Returns Type Description int Valuation of the number relative to Base. Implements IEquatable<T> IComparable<T>"
  },
  "MathLib.html": {
    "href": "MathLib.html",
    "title": "Namespace MathLib | MathLib Docs",
    "keywords": "Namespace MathLib Classes BaseExtensions Contains extensions for base in number representations. BaseInt Represents an immutable base-specific integer of a fixed length, that supports zero-padding. BigIntegerExtensions Provides a set of extension methods for the BigInteger struct, enabling additional functionality such as determining whether a number is odd, computing its absolute value, and calculating its bit length. It also provides the Extended Euclidean algorithm for computing GCD and Bézout coefficients. Cp Represents the field of complex p-adic numbers, denoted ℂₚ in mathematics. EnumerableExtensions Provides extension methods for IEnumerable<T>. IntExtensions Lib Static class for general assembly methods Q Represents the set of rational numbers, denoted by ℚ in mathematics. QTuple Qb Represents a rational number with a base-dependent expansion, denoted ℚb. Qp Represents p-adic numbers that are rational, denoted ℚ⊂ℚₚ."
  },
  "index.html": {
    "href": "index.html",
    "title": "MathLib API Documentation | MathLib Docs",
    "keywords": "MathLib documentation Welcome to the documentation for MathLib. API Documentation MathLib MathLib source code repo at GitHub"
  }
}